initSidebarItems({"enum":[["UrlError","Errors that can occur during parsing."]],"fn":[["get","Shortcut method to quickly make a `GET` request."]],"mod":[["async","An 'async' implementation of the reqwest `Client`."],["cookie","The cookies module contains types for working with request and response cookies."],["header","HTTP header types"],["multipart","multipart/form-data"]],"struct":[["Body","The body of a `Request`."],["Certificate","Represent a server X509 certificate."],["Client","A `Client` to make Requests with."],["ClientBuilder","A `ClientBuilder` can be used to create a `Client` with  custom configuration."],["Error","The Errors that may occur when processing a `Request`."],["Identity","Represent a private key and X509 cert as a client certificate."],["Method","The Request Method (VERB)"],["Proxy","Configuration of a proxy that a `Client` should pass requests to."],["RedirectAction","An action to perform when a redirect status code is found."],["RedirectAttempt","A type that holds information on the next request and previous requests in redirect chain."],["RedirectPolicy","A type that controls the policy on how to handle the following of redirects."],["Request","A request which can be executed with `Client::execute()`."],["RequestBuilder","A builder to construct the properties of a `Request`."],["Response","A Response to a submitted `Request`."],["StatusCode","An HTTP status code (`status-code` in RFC 7230 et al.)."],["Url","A parsed URL record."],["Version","Represents a version of the HTTP spec."]],"trait":[["IntoUrl","A trait to try to convert some type into a `Url`."]],"type":[["Result","A `Result` alias where the `Err` case is `reqwest::Error`."]]});